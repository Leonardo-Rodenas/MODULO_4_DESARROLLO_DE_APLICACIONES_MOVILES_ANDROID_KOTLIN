package cl.duoc.ejemploroom.room

import android.content.Context
import android.util.Log
import androidx.arch.core.executor.testing.InstantTaskExecutorRule
import androidx.room.Room
import androidx.test.core.app.ApplicationProvider
import androidx.test.ext.junit.runners.AndroidJUnit4
import androidx.test.filters.SmallTest
import cl.duoc.ejemploroom.getOrAwaitValue
import cl.duoc.ejemploroom.model.Mensaje
import com.google.common.truth.Truth
import kotlinx.coroutines.ExperimentalCoroutinesApi
import kotlinx.coroutines.test.runBlockingTest
import org.junit.Assert.*

import org.junit.After
import org.junit.Before
import org.junit.Rule
import org.junit.Test
import org.junit.runner.RunWith

@ExperimentalCoroutinesApi
@RunWith(AndroidJUnit4::class)
@SmallTest
class MensajeDatabaseTest {

    @get:Rule
    var instantTaskExecutorRule = InstantTaskExecutorRule()

    private lateinit var db: MensajeDatabase
    private lateinit var dao: MensajeDao


    @Before
    fun setUp() {
        val context = ApplicationProvider.getApplicationContext<Context>()
        db = Room.inMemoryDatabaseBuilder(context,MensajeDatabase::class.java).build()
        dao = db.mensajeDao()
    }

    @After
    fun tearDown() {
        db.close()
    }

    @Test
    fun test_agregar() = runBlockingTest {
        var mensaje:Mensaje = Mensaje("Prueba")
        dao.agregar(mensaje)

        val mTest = dao.buscar(1).getOrAwaitValue()
        Truth.assertThat(mTest.contenido).isEqualTo(mensaje.contenido)
        //id NO es autogenerated
        //val lista = dao.listar().getOrAwaitValue()
        //Truth.assertThat(lista).contains(mensaje)
    }

    @Test
    fun test_delete() = runBlockingTest {

//        for(i in generarLista())
//        {
//            dao.agregar(i)
//        }

        var m:Mensaje = Mensaje("Prueba Eliminar")
        dao.agregar(m)
        dao.eliminar(m)

        val lista = dao.listar().getOrAwaitValue()
        //Log.d("lista",lista.toString())
        Truth.assertThat(lista).doesNotContain(m)
    }


    //EJEMPLO EXTRA
    private fun generarLista() : List<Mensaje>
    {
        var lista:ArrayList<Mensaje> = ArrayList()
        for (i in 0..10)
        {
            var m = Mensaje("contendo $i")
            lista.add(m)
        }
        return lista
    }
}